version: "3.7"

volumes:
  gem_bundle:  # Used to store the app's gem libraries...
  node_modules: # Used to store the app's node modules...

networks:
  backend:

services:
  # The migration processor container - we'll use this as the base for the rest
  # of the app service definitions:
  migration: &app
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - DEVELOPER_UID=${UID:-1000}
        - DEVELOPER_GID=${GID:-1000}
        - DEVELOPER_USERNAME=${USER:-you}
    image: icalialabs/sepomex:development
    entrypoint: /usr/src/bin/dev-entrypoint.sh
    volumes:
      # Mount the app code into the app containers at the "/usr/src" folder:
      - .:/usr/src

      # After mounting the app code, we will use volumes to store the project's
      # gem libraries and node modules.

      # In the case of the gem libraries, the "gem_bundle" volume will be
      # initialized with the development image's installed gems. Gems can be
      # added later during the development process without re-building the
      # development image:
      - gem_bundle:/usr/local/bundle

      # In the case of the node modules, the "node_modules" volume will also be
      # initialized with the development image's installed node modules. Also,
      # notice how we're mounting the "node_modules" volume *inside* the mounted
      # source code, effectively replacing any contents you might have on your
      # project's "node_modules" folder in the container, offering several
      # advantages:
      # - We can run the frontend app either from the host (i.e. macOS) or
      #   using containers without having the host & container clobber the npm
      #   each other's packages, or avoid conflicting versions for macOS / Linux
      # - Speeds up the npm operations on the container when running on
      #   macOS/Windows, since a local volume bind on mac/win is significantly
      #   slower than a Docker volume, and node module install is very sensitive
      #   to I/O performance
      - node_modules:/usr/src/node_modules

    networks:
      - backend

    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

    # Link to our postgres service, so they can be visible from our
    # app service containers:
    depends_on:
      - postgres

    # The command we want to execute by default when running the container
    command: rails db:migrate

    # Specify environment variables available for our app containers. We'll
    # leave a YML anchor in case we need to override or add more variables if
    # needed on each app service:
    environment: &app_environment
      # Override these environment variables, in case something changed on your
      # host (highly unlikely)
      DEVELOPER_UID: ${UID:-1000}
      DEVELOPER_GID: ${GID:-1000}
      DEVELOPER_USERNAME: ${USER:-you}

      # We'll set the DATABASE_URL environment variable for the app to connect
      # to our postgres container - no need to use a 'config/database.yml' file.
      DATABASE_URL: postgres://postgres:3x4mpl3P455w0rd@postgres:5432/

      # We'll set the RAILS_ENV and RACK_ENV environment variables to
      # 'development', so our app containers will start in 'development' mode
      # on this compose project:
      RAILS_ENV: development
      RACK_ENV: development
      RAILS_LOG_TO_STDOUT: "true"
      MAILER_HOST: localhost
      MAILER_PORT: 3000
      LISTEN_USE_POLLING: ${SEPOMEX_LISTEN_USE_POLLING:-no}
      NEW_RELIC_AGENT_ENABLED: "false"


  web:
    <<: *app
    command: rails server -p 3000 -b 0.0.0.0
    ports:
      - ${SEPOMEX_WEB_PORT:-3000}:3000
    depends_on:
      - postgres
    environment:
      <<: *app_environment

  test:
    <<: *app
    command: rspec
    ports:
      - ${SEPOMEX_WEB_PORT:-3001}:3001
    environment:
      <<: *app_environment
      RAILS_ENV: test
      RACK_ENV: test
