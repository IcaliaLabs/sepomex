volumes:
  postgres_data:

services:
  postgres:
    image: postgres:10.6-alpine
    volumes:
      # We'll store the postgres data in the 'postgres_data' volume we defined:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      # - type: bind
      #   source: ./db/dumps
      #   target: /db/dumps
      # - ./bin/dumpdb:/usr/local/sbin/dumpdb:ro
      # - ./bin/restoredb:/usr/local/sbin/restoredb:ro
    ports:
      - published: ${SEPOMEX_PG_PORT:-5432}
        target: 5432
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust

  # Used to connect to the Cloud SQL Instances during the continuous deployment
  # - See https://cloud.google.com/sql/docs/postgres/connect-admin-proxy#connect-to-proxy
  cloudsql:
    image: gcr.io/cloudsql-docker/gce-proxy:1.23.0-alpine
    command: /cloud_sql_proxy -instances=icalia-devops:us-central1:pg-thirteen-b=tcp:0.0.0.0:5432
    ports:
      # We'll bind the host port to localhost (127.0.0.1):
      - 127.0.0.1:${SEPOMEX_CLOUDSQL_PG_PORT:-5433}:5432
    volumes:
      - type: bind
        source: ./google-cloud-credentials.json
        target: /config/google-cloud-credentials.json
        read_only: true
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /config/google-cloud-credentials.json

  # The tests container:
  tests: &app
    build: &app_build
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        DEVELOPER_UID: ${UID:-1000}
        DEVELOPER_USERNAME: ${USER:-you}
    image: icalialabs/sepomex:development

    volumes:
      # Mount the app code into the app containers:
      - .:/workspaces/sepomex

    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

    # Required for ptrace-based debuggers like C++, Go, and Rust
    cap_add:
      - SYS_PTRACE
      - NET_ADMIN
    security_opt:
      - seccomp:unconfined

    # entrypoint: /workspaces/sepomex/bin/dev-entrypoint

    # Link to our postgres and redis services, so they can be visible from our
    # app service containers:
    depends_on:
      - postgres

    # The command we want to execute by default when running the container
    command: rspec

    # Specify environment variables available for our app containers. We'll
    # leave a YML anchor in case we need to override or add more variables if
    # needed on each app service:
    environment: &app_env
      RAILS_LOG_TO_STDOUT: "true"

      DEBIAN_FRONTEND: dialog

      DATABASE_URL: postgres://postgres@postgres:5432/?encoding=unicode
      
  # The development container:
  development:
    <<: *app

    ports:
      - ${SEPOMEX_WEB_PORT:-4201}:${SEPOMEX_WEB_PORT:-4201}

    # The command we want to execute by default when running the container
    command: rails server -b 0.0.0.0
    environment:
      <<: *app_env
      PORT: ${SEPOMEX_WEB_PORT:-4201}